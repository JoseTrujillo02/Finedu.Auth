name: Deploy API to Somee via FTP

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore Finedu.Auth.sln

      - name: Build
        run: dotnet build Finedu.Auth.sln -c Release --no-restore

      - name: Publish for IIS (includes web.config)
        run: >
          dotnet publish ./Finedu.Auth/Finedu.Auth.csproj
          -c Release
          -o ./publish
          -p:PublishIISAssets=true

      # === Firebase Admin: escribir el JSON desde el secret (para publicación) ===
      - name: Write Firebase key to ./publish/secrets/serviceAccountKey.json
        shell: pwsh
        run: |
          $secretJson = @'
          ${{ secrets.FIREBASE_KEY }}
          '@
          $dir = Join-Path $PWD "publish/secrets"
          New-Item -ItemType Directory -Force -Path $dir | Out-Null
          $path = Join-Path $dir "serviceAccountKey.json"
          $secretJson | Out-File -FilePath $path -Encoding utf8 -Force
          # Validar JSON
          try { Get-Content $path | ConvertFrom-Json | Out-Null } catch { throw "FIREBASE_KEY is not valid JSON" }
          Write-Host "Firebase key written and validated at $path"

      # === Subir app_offline.htm para descargar la app en IIS y liberar locks ===
      - name: Create app_offline.htm
        shell: pwsh
        run: |
          $tmp = Join-Path $PWD "tmp-offline"
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null
          @"
          <html><head><meta charset='utf-8'><title>En mantenimiento</title></head>
          <body style='font-family:sans-serif'>
            <h2>Desplegando nueva versión...</h2>
            <p>Intenta de nuevo en unos segundos.</p>
          </body></html>
          "@ | Out-File -FilePath (Join-Path $tmp "app_offline.htm") -Encoding utf8 -Force

      - name: Upload app_offline.htm (take app offline)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: fineduauth.somee.com
          username: cid919310uttt1
          password: Cid919310$
          protocol: ftp
          port: 21
          local-dir: ./tmp-offline/
          server-dir: /www.fineduauth.somee.com/
          dangerous-clean-slate: false

      - name: Wait for IIS to unload app
        run: powershell -Command "Start-Sleep -Seconds 8"

      # === Deploy del sitio ya con la app descargada ===
      - name: Deploy to Somee via FTP (site files)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: fineduauth.somee.com
          username: cid919310uttt1
          password: Cid919310$
          protocol: ftp
          port: 21
          local-dir: ./publish/
          server-dir: /www.fineduauth.somee.com/
          exclude: |
            **/.git*
            **/.github/**
            logs/**
          dangerous-clean-slate: false

      # === Borrar app_offline.htm para volver a levantar la app ===
      - name: Remove app_offline.htm (bring app online)
        shell: pwsh
        run: |
          $user = "cid919310uttt1"
          $pass = "Cid919310$"
          $uri = "ftp://fineduauth.somee.com/www.fineduauth.somee.com/app_offline.htm"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential($user, $pass)
          # En FTP, borrar = método WebRequest manual
          $req = [System.Net.FtpWebRequest]::Create($uri)
          $req.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile
          $req.Credentials = $wc.Credentials
          $req.UseBinary = $true
          $req.UsePassive = $true
          $resp = $req.GetResponse()
          $resp.Close()
          Write-Host "app_offline.htm deleted"

      # (Opcional) Preflight GET /
      - name: Verify home after deploy
        shell: pwsh
        run: |
          try {
            Start-Sleep -Seconds 3
            $resp = Invoke-WebRequest -Uri "http://www.fineduauth.somee.com/" -UseBasicParsing -TimeoutSec 20
            Write-Host "Home status:" $resp.StatusCode
          } catch {
            Write-Warning "Home didn't respond yet, but deploy finished. It may still be spinning up."
          }
